name: CI/CD for Express App (Blue-Green Deployment)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        env:
          IMAGE: ${{ secrets.DOCKER_USERNAME }}/bluegreen-express:latest
        run: |
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to AWS EC2 (Blue-Green)
        # 1. Define local variables using secrets
        run: |
          # Define local variables using secrets. These will be substituted by the runner.
          DOCKER_USER_SECRET="${{ secrets.DOCKER_USERNAME }}"
          DOCKER_PASS_SECRET="${{ secrets.DOCKER_PASSWORD }}"
          APP_IMAGE="${{ secrets.DOCKER_USERNAME }}/bluegreen-express:latest"

          echo "${{ secrets.AWS_KEY }}" > bipro.pem
          chmod 600 bipro.pem

          # 2. SSH into remote host using UNQUOTED EOF (<< EOF)
          # This allows the runner to substitute the SECRET variables.
          # All variables meant for the REMOTE shell must now be ESCAPED (\$).
          ssh -o StrictHostKeyChecking=no -i bipro.pem ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << EOF
            set -e

            # --- Install docker & nginx if missing ---
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo usermod -aG docker \$USER || true  # Escaped \$USER
              sudo systemctl enable --now docker
            fi

            if ! command -v nginx >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y nginx
            fi

            # --- Ensure docker network (Fixed: Silenced error output) ---
            docker network create app_net 2>/dev/null || true

            # --- Start MongoDB once (persists across deployments) ---
            if ! docker ps --filter "name=mongo-db" --format '{{.Names}}' | grep -q '^mongo-db\$'; then # Escaped \$
              docker run -d \\
                --name mongo-db \\
                --network app_net \\
                -p 27017:27017 \\
                -v mongo_data:/data/db \\
                mongo:7
              echo "Waiting for MongoDB to initialize..."
              sleep 10
            fi

            # --- Pull latest app image ---
            # *** FIX: Variables substituted here by the local runner ***
            docker login -u "${DOCKER_USER_SECRET}" -p "${DOCKER_PASS_SECRET}"
            docker pull "${APP_IMAGE}"

            # --- Determine active color (All variables below must be escaped \$ to run on remote) ---
            if docker ps --format '{{.Names}}' | grep -q '^app-blue\$'; then
              ACTIVE_COLOR="blue"
              IDLE_COLOR="green"
              IDLE_PORT=3002
              ACTIVE_PORT=3001
            elif docker ps --format '{{.Names}}' | grep -q '^app-green\$'; then
              ACTIVE_COLOR="green"
              IDLE_COLOR="blue"
              IDLE_PORT=3001
              ACTIVE_PORT=3002
            else
              ACTIVE_COLOR="none"
              IDLE_COLOR="blue"
              IDLE_PORT=3001
            fi

            echo "Active: \$ACTIVE_COLOR | Deploying to idle: \$IDLE_COLOR (port \$IDLE_PORT)"

            # --- Stop/remove idle container if exists ---
            docker rm -f app-\$IDLE_COLOR 2>/dev/null || true

            # --- Run idle container (bind to its host port) ---
            docker run -d \\
              --name app-\$IDLE_COLOR \\
              --network app_net \\
              -p \$IDLE_PORT:5000 \\
              -e MONGO_URL="mongodb://mongo-db:27017/bluegreen" \\
              "${APP_IMAGE}"

            # --- Simple warmup check (optional) ---
            echo "Warming up new app on port \$IDLE_PORT..."
            for i in {1..20}; do
              if curl -fsS "http://127.0.0.1:\$IDLE_PORT/health" >/dev/null; then
                echo "New app is healthy."
                break
              fi
              sleep 2
            done

            # --- Put NGINX config in place (once), then switch upstream port ---
            if [ ! -f /etc/nginx/conf.d/bluegreen.conf ]; then
              sudo mkdir -p /etc/nginx/conf.d
              sudo tee /etc/nginx/conf.d/bluegreen.conf >/dev/null <<NGX
              server {
                  listen 3000;
                  server_name _;
                                
                  location / {
                      proxy_pass http://127.0.0.1:\$IDLE_PORT;
                      proxy_http_version 1.1;
                      proxy_set_header Connection "";
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  }
              }
              NGX
              sudo nginx -t
              sudo systemctl restart nginx
            else
              # swap the upstream port inside the file
              sudo sed -i "s|proxy_pass http://127.0.0.1:[0-9]*;|proxy_pass http://127.0.0.1:\$IDLE_PORT;|g" /etc/nginx/conf.d/bluegreen.conf
              sudo nginx -t
              sudo nginx -s reload
            fi

            echo "Switched traffic to \$IDLE_COLOR."

            # --- Remove old active container to free port (keep for rollback if you prefer) ---
            if [ "\$ACTIVE_COLOR" != "none" ]; then
              docker rm -f app-\$ACTIVE_COLOR || true
              echo "Removed old \$ACTIVE_COLOR."
            fi
          EOF
